From 4434bf9d2b5f53a910e4d9fb50c54c0be6a71c93 Mon Sep 17 00:00:00 2001
From: WINNER03 <claudeadjanohoun@gmail.com>
Date: Thu, 23 Jul 2020 21:00:32 -0700
Subject: [PATCH] Create Patch File

---
 datafeed/server.py  |  8 ++++----
 src/App.tsx         | 30 ++++++++++++++++++++++++------
 src/DataStreamer.ts |  2 +-
 src/Graph.tsx       | 16 +++++++++++++---
 4 files changed, 42 insertions(+), 14 deletions(-)

diff --git a/datafeed/server.py b/datafeed/server.py
index 2ffad43..55b91a9 100644
--- a/datafeed/server.py
+++ b/datafeed/server.py
@@ -201,7 +201,7 @@ def get(req_handler, routes):
                 req_handler.wfile.write(data)
                 return
 
-def run(routes, host = '0.0.0.0', port = 8080):
+def run(routes, host = '0.0.0.0', port = 8085):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
@@ -214,7 +214,7 @@ def run(routes, host = '0.0.0.0', port = 8080):
     thread = threading.Thread(target = server.serve_forever)
     thread.daemon = True
     thread.start()
-    print 'HTTP server started on port 8080'
+    print ('HTTP server started on port 8085')
     while True:
         from time import sleep
         sleep(1)
@@ -274,7 +274,7 @@ class App(object):
         t1, bids1, asks1 = self._current_book_1.next()
         t2, bids2, asks2 = self._current_book_2.next()
         t = t1 if t1 > t2 else t2
-        print 'Query received @ t%s' % t
+        print ('Query received @ t%s' % t)
         return [{
             'id': x and x.get('id', None),
             'stock': 'ABC',
@@ -308,6 +308,6 @@ class App(object):
 
 if __name__ == '__main__':
     if not os.path.isfile('test.csv'):
-        print "No data found, generating..."
+        print ("No data found, generating...")
         generate_csv()
     run(App())
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..aac3696 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph:boolean;
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph:false,
     };
   }
 
@@ -29,20 +31,36 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+    
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval =setInterval (() => {
+      DataStreamer.getData(( serverResponds:ServerRespond[]) =>{
+        this.setState ({
+          data:serverResponds,
+          showGraph:true,
+        });
+      });
+      x++;
+      if (x>1000){
+        clearInterval(interval);
+      }
+    },100);
   }
 
+
+    
+    
+  
+
   /**
    * Render the App react component
    */
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 78583cb..eef3f09 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -15,7 +15,7 @@ export interface ServerRespond {
 
 class DataStreamer {
   // The url where datafeed server is listening
-  static API_URL: string = 'http://localhost:8080/query?id=1';
+  static API_URL: string = 'http://localhost:8085/query?id=1';
 
   /**
    * Send request to the datafeed server and executes callback function on success
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..161b804 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem =  document.getElementsByTagName ('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -47,7 +47,17 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
+      elem.setAttribute('view','y_line');
+      elem.setAttribute ('column-pivots','["stock"]');
+      elem.setAttribute ('row-pivots','["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates',`
+      {  "stock":"distinct count",
+      "top _ask_price":"avg",
+      "top_bid_price":"avg",
+      "timestamp":"distinct count"} `);
+
+      
       elem.load(this.table);
     }
   }
-- 
2.27.0.windows.1

